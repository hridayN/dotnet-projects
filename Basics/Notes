* By default access modifier for a class item/property is Private
* If a member/property is declared static, the whole class shares the single copy of the member/property.
* Static constructor is invoked only once, independent of the number of instances of the class.
* Instance constructor is invoked with every instance of the class.
* Static constructor is invoked before the instance constructor.
* Static constructor comes into picture when we need to initialize static members of the class.
* Access modifiers are not allowed for static constructors because whenever an static member of the class is invoked, the static constructor will be invoked automatically. Hence, we need not call static constructor explicitly.
* Static members of the class can be accessed using ClassName where as instance members needs an object reference to be accessed.
* Inside an Static member, 'this' can't be used for accessing any of the property/member/method of the class.

OOPS
* C sharp doesn't support multiple class inheritance, although, multi level inheritance is supported.
* c sharp support multiple interface inheritance.
* Whenever we create an instance of a Child/derived class, it automatically creates the instance of Parent/base class.

POLYMORPHISM
* It is possible to create a reference of ParentClasstype to ChildClasstype, as Child/Derived class fulfills all the requirements of Parent/base class.
* It's not possible to create a reference of ChildClasstype to ParentClasstype as it might not be possible that Parent/Base class fulfills all the requirements of Child/Derived class.
* Polymorphism allows us to override the methods/definition provided by the base/parent class by creating a reference of base/parent class to the object of derived/child class at runtime. By that reference we can  access the respective method defined/provided by the derived/child class.

METHOD OVERRIDING
* We declare the method in base/parent class as 'Virtual' and the method provided by derived/child class as 'override'.
* When a method of base class is declared as 'virtual', it indicates all the derived classes, which are inheriting the base class that this method can be overridden.

METHOD HIDING
* We declare the method in base/parent class as 'Virtual' and the method provided by derived/child class as 'new'.
* Creating a reference of base/parent class to the derived/child class will always point to the hidden method of base/parent class.

REFACTORING

STRUCTS VS CLASSES
* Structs are value type, classes are reference type
* Objects reference variables are stored in stack where as objects are stored in Heap.
* Class can have destructor, where as structs can't have.
* Structs can't have explicit parameterless constructor, where as a class can have one.

VALUE TYPE vs REFERENCE TYPE
* Value types hold the value where they are declared, Reference type hold a reference to an object in memory.
* For value types, they are destroyed as soon as their scope is finished, where as reference types destroys the   reference variable to object after the scope is finished. The object is later destroyed.

INTERFACE
* An interface can have only declaration. No implementations/definitions of the methods.
* Instance of an interface can't be created. 
* A reference variable of an interface can point to an object of derived class.
* The members of an interface are public by default. There can't be any explicit access modifier for a member.
* An interface can't contain a property.
* A class implements an interface, thereby providing the declarations for the interface methods.
* Signature of the method defined in interface should match with that of declared in class implementing the interface.
* Multiple interfaces can be iherited by a class.
* If a class inherits an interface which is already inheriting another interface then the class mmust provide implementations for all the methods of all the interfaces.

<<<<<<< HEAD
* Arrays are strongly typed. We can only store a particular type in an array.
* An object array can store multiple types.
=======
REGEX
* \  - represents metacharacter
* \d - represents digits from 0-9
* .  - match any single character (letter, digit, whitespace, everything)
* [string] - to match a particular string
* [^starting char]pattern - to match a particular string, starting with starting char and with the length of (starting char + pattern) length  
* 
>>>>>>> master
